import streamlit as st
import pandas as pd
import time
import secrets
import random
from datetime import datetime

# ===================================================================
# PARTIE 1 : D√âFINITION DE TOUTES LES FONCTIONS DE SIMULATION "JURY"
# ===================================================================

def simuler_maintenance_predictive_v2(scenario='Normal'):
    st.subheader("‚öôÔ∏è Simulation : Maintenance Pr√©dictive")
    # --- Donn√©es de Simulation ---
    if scenario == 'Alerte':
        data = {'timestamp': pd.to_datetime(['18:20:01', '18:20:02', '18:20:03', '18:20:04', '18:20:05'], format='%H:%M:%S').time, 'vibration_level': [0.21, 0.23, 0.22, 0.85, 0.87], 'temperature_celsius': [45, 46, 45, 68, 70], 'power_consumption_kw': [150.5, 151.0, 150.2, 185.7, 188.1]}
    else: # Sc√©nario 'Normal'
        data = {'timestamp': pd.to_datetime(['18:20:01', '18:20:02', '18:20:03', '18:20:04', '18:20:05'], format='%H:%M:%S').time, 'vibration_level': [0.21, 0.23, 0.22, 0.24, 0.21], 'temperature_celsius': [45, 46, 45, 47, 46], 'power_consumption_kw': [150.5, 151.0, 150.2, 152.0, 151.5]}
    df = pd.DataFrame(data).set_index('timestamp')
    st.subheader("üìà Donn√©es des Capteurs en Temps R√©el")
    st.line_chart(df)
    with st.spinner("ANALYSE (IA Rekarbon): Corr√©lation des donn√©es en cours..."):
        time.sleep(1.5)
    latest_data = df.iloc[-1]
    if latest_data['vibration_level'] > 0.8:
        st.error("‚ö†Ô∏è ALERTE SYST√àME : Risque de d√©faillance critique d√©tect√© !", icon="üö®")
        col1, col2, col3 = st.columns(3)
        col1.metric("Niveau de Vibration", f"{latest_data['vibration_level']} g", "√âlev√©")
        col2.metric("Temp√©rature", f"{latest_data['temperature_celsius']} ¬∞C", "Critique")
        col3.metric("Consommation", f"{latest_data['power_consumption_kw']} kW", "+25%")
        st.warning("**Synth√®se de l'IA :** Corr√©lation anormale d√©tect√©e, probabilit√© de d√©faillance imminente de 98%.")
        st.success("‚úÖ ACTIONS INITI√âES : Ticket de maintenance cr√©√©, pi√®ce command√©e, ligne de production mise en s√©curit√©.")
        
        # --- SECTION : G√âN√âRATION DE DOCUMENT ---
        with st.expander("üìÑ Afficher le Rapport d'Intervention Confidentiel"):
            st.markdown("---")
            # En-t√™te
            col1, col2 = st.columns(2)
            with col1:
                st.write("**Rekarbon S.A.S**")
                st.write("1 Rue de l'Avenir, Savannah")
                st.write("97460 Saint-Paul, La R√©union")
                st.write("**SIRET :** 843 456 789 00015")
                st.write("**TVA Intra. :** FR 12 843456789")
            with col2:
                st.write(f"**Rapport N¬∞ :** MNT-{datetime.now().year}-{random.randint(100, 999)}")
                st.write(f"**Date d'√©mission :** {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                st.write("**Niveau :** Confidentiel Interne")
            st.markdown("---")
            # Corps
            st.subheader("Objet : Rapport d'Intervention Pr√©dictive - Broyeur √† bois")
            st.markdown("Ce rapport est g√©n√©r√© par l'IA d'orchestration **IA Rekarbon** suite √† la d√©tection d'une anomalie critique.")
            st.write("**Diagnostic IA :**")
            st.warning("**Cause Racine :** La corr√©lation d'une vibration √©lev√©e, d'une surchauffe et d'une surconsommation √©lectrique indique une probabilit√© de 98% de d√©faillance imminente du roulement principal (pi√®ce SKF-6203).")
            st.write("**Actions Correctives Automatis√©es :**")
            st.info("""1.  **Mise en S√©curit√© :** Ligne de production 'Broyage' mise en pause.
            2.  **Maintenance :** Ticket de maintenance prioritaire assign√© √† l'√©quipe technique.
            3.  **Logistique :** Commande de la pi√®ce 'Roulement √† billes SKF-6203' pass√©e automatiquement.""")
            st.markdown("---")
            # Pied de page
            st.caption("Ce document est la propri√©t√© de Rekarbon S.A.S. Diffusion non autoris√©e interdite.")
    else:
        st.success("‚úÖ STATUT : Tous les syst√®mes du broyeur sont op√©rationnels.", icon="üëç")

def simuler_optimisation_logistique_v2():
    st.subheader("üöö Simulation : Optimisation Logistique")
    with st.spinner("ANALYSE (IA Rekarbon): Analyse des inventaires, commandes et capacit√© de production..."):
        time.sleep(2.5)
    data_inventaire = {'Produit': ['Bio-huile', 'Biochar Granul√©', 'Engrais Liquide'], 'Stock Actuel (tonnes)': [15, 80, 45], 'Stock de S√©curit√©': [30, 50, 50], 'Commandes √† Honorer (tonnes)': [40, 65, 20]}
    df_inventaire = pd.DataFrame(data_inventaire)
    produit_critique = df_inventaire.loc[0]
    deficit = produit_critique['Commandes √† Honorer (tonnes)'] - produit_critique['Stock Actuel (tonnes)']
    st.subheader("üì¶ √âtat des Stocks Actuels")
    st.dataframe(df_inventaire)
    st.subheader(f"üìä Analyse du Produit Critique : {produit_critique['Produit']}")
    col1, col2, col3 = st.columns(3)
    col1.metric("Stock Actuel", f"{produit_critique['Stock Actuel (tonnes)']} t")
    col2.metric("Commandes √† Honorer", f"{produit_critique['Commandes √† Honorer (tonnes)']} t")
    col3.metric("D√©ficit", f"{deficit} t", delta_color="inverse")
    st.error("‚ö†Ô∏è ALERTE LOGISTIQUE : Rupture de stock imminente sur la ligne 'Bio-huile'.", icon="üì¶")
    st.warning(f"**Synth√®se de l'IA :** Le stock de bio-huile ({produit_critique['Stock Actuel (tonnes)']} t) est inf√©rieur de {deficit} tonnes √† la demande client ({produit_critique['Commandes √† Honorer (tonnes)']} t).")
    with st.spinner("D√âCISION (IA Rekarbon): Formulation d'un plan d'action correctif..."):
        time.sleep(2)
    st.success("‚úÖ PLAN D'ACTION PROPOS√â:")
    st.info("""1.  **Production :** Augmenter la cadence de production de bio-huile de 15%.
    2.  **Commercial :** Contacter le client 'Client-ABC' pour proposer une livraison partielle.
    3.  **Achats :** Lancer une commande d'urgence de mati√®re premi√®re.""")

def simuler_livraison_temps_pluie_v2():
    st.subheader("‚õàÔ∏è Simulation : Itin√©raire de Livraison M√©t√©o-d√©pendant")
    with st.spinner("ANALYSE (IA Rekarbon): Analyse des donn√©es m√©t√©o en temps r√©el et de l'√©tat des routes..."):
        time.sleep(2)
    st.info("M√âT√âO: Pluies fortes d√©tect√©es sur l'itin√©raire de livraison principal (Route du Littoral).")
    st.subheader("‚öñÔ∏è Matrice de D√©cision de l'IA")
    decision_data = {'Option': ['Plan A: Maintenir', 'Plan B: D√©tourner'], 'Risque de retard important': ['√âlev√© (85%)', 'Faible (10%)'], 'Co√ªt Carburant Estim√©': ['135 ‚Ç¨', '165 ‚Ç¨ (+22%)'], 'Satisfaction Client Estim√©e': ['-40 pts', '+5 pts']}
    st.table(pd.DataFrame(decision_data))
    with st.spinner("D√âCISION (IA Rekarbon): S√©lection du plan B pour garantir la livraison..."):
        time.sleep(2)
    st.success("‚úÖ NOUVEL ITIN√âRAIRE D√âFINI: Le camion a √©t√© redirig√© via la Plaine des Palmistes. Retard estim√©: 25 minutes.")

def simuler_vente_et_tokenisation_v2():
    st.subheader("üî• Simulation : Vente de Biochar & Tokenisation")
    quantite_vendue = 25
    prix_tonne = 600
    valeur_transaction = quantite_vendue * prix_tonne
    tokens_generes = int(valeur_transaction / 10)
    st.info(f"TRANSACTION: Vente de **{quantite_vendue} tonnes** de biochar √† 'Client Industriel SAS'.")
    col1, col2 = st.columns(2)
    col1.metric("Montant de la Vente", f"‚Ç¨ {valeur_transaction:,.0f}")
    col2.metric("Tokens REKAR G√©n√©r√©s", f"{tokens_generes} REKAR", "R√©compense")
    with st.spinner("D√âCISION (IA Rekarbon): Enregistrement de la transaction et des tokens sur la blockchain..."):
        time.sleep(2)
    st.success(f"TOKENISATION R√âUSSIE: {tokens_generes} tokens 'REKAR' ont √©t√© g√©n√©r√©s et assign√©s au client.")
    st.code(f"ID de Transaction Blockchain: 0x{secrets.token_hex(30)}")
    st.subheader("üß† Indicateur IA : Potentiel March√© du Token")
    st.metric("Pr√©vision de valeur du token REKAR √† 6 mois", "13.80 ‚Ç¨", "+15%", help="Bas√© sur l'anticipation des march√©s carbone volontaires.")

def simuler_reforestation_et_carbone_v2():
    st.subheader("üå≥ Simulation : Reforestation & Cr√©dits Carbone")
    with st.spinner("ANALYSE (IA Rekarbon): Traitement des derni√®res images satellites..."):
        time.sleep(2.5)
    total_hectares_reboises = 120
    hectares_valides_maturite = 87
    taux_maturite = int((hectares_valides_maturite / total_hectares_reboises) * 100)
    carbone_par_hectare = 15.5
    total_carbone_sequestre = hectares_valides_maturite * carbone_par_hectare
    prix_credit_carbone = 35
    st.info(f"**Analyse de la parcelle 'REK-AF-01' ({total_hectares_reboises} ha)**")
    st.write(f"**Taux de maturit√© des arbres :** {taux_maturite}%")
    st.progress(taux_maturite)
    st.subheader("üìä Bilan de S√©questration Carbone")
    col1, col2, col3 = st.columns(3)
    col1.metric("Hectares Matures", f"{hectares_valides_maturite} ha", "Certifi√©s")
    col2.metric("CO2 S√©questr√©", f"{total_carbone_sequestre:,.0f} tonnes", "Annuel")
    col3.metric("Valorisation Potentielle", f"‚Ç¨ {total_carbone_sequestre * prix_credit_carbone:,.0f}", f"√† {prix_credit_carbone}‚Ç¨/t")
    st.warning("**Synth√®se de l'IA :** L'analyse de la canop√©e confirme que 87 hectares ont atteint le seuil de maturit√© requis pour la certification.")
    with st.spinner("D√âCISION (IA Rekarbon): Pr√©paration du dossier de certification..."):
        time.sleep(2)
    st.success("‚úÖ DOSSIER PR√äT: Le rapport de certification est g√©n√©r√©.")

def simuler_cession_token():
    st.subheader("üîÅ Simulation : Cession de Tokens B2B")
    valeur_token = 12
    tokens_cedes = 500
    montant_total = valeur_token * tokens_cedes
    st.info("Contexte : **Client A** c√®de des tokens REKAR √† **Client B** pour sa compensation carbone.")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("C√©dant : Client A")
        st.metric("Tokens C√©d√©s", f"- {tokens_cedes} REKAR")
    with col2:
        st.subheader("Acqu√©reur : Client B")
        st.metric("Tokens Re√ßus", f"+ {tokens_cedes} REKAR")
    st.metric("Montant Total de la Transaction", f"‚Ç¨ {montant_total:,.0f}", f"Bas√© sur 1 token = {valeur_token}‚Ç¨")
    with st.spinner("TRANSACTION: Enregistrement sur la blockchain..."):
        time.sleep(2)
    st.success("CESSION VALID√âE ET ENREGISTR√âE.")
    st.code(f"ID de Transaction: 0x{secrets.token_hex(30)}")

def simuler_rapport_fmi():
    st.subheader("üåç Rapport Synth√©tique : Demande de Financement FMI (√éle Maurice)")
    st.info("Objectif : Obtenir un financement vert de 8,5M ‚Ç¨ pour un d√©ploiement national.")
    with st.expander(" üå± Secteur Agricole & √ânergie"):
        st.markdown("- Valorisation des d√©chets agricoles (canne √† sucre) via pyrolyse.")
        st.markdown("- Vente de biochar subventionn√© aux exploitants locaux.")
    with st.expander("üíª Secteur Num√©rique & Emploi"):
        st.markdown("- Cr√©ation d‚Äôun r√©seau autonome IA-native sur panneaux solaires.")
        st.markdown("- Objectif : +1000 emplois verts et formation.")
    st.subheader("üìà Objectifs Cl√©s pour 2030")
    col1, col2, col3 = st.columns(3)
    col1.metric("R√©duction √âmissions", "-25%", "vs 2020")
    col2.metric("Emplois Cr√©√©s", "+1000", "verts")
    col3.metric("Autosuffisance √ânerg√©tique", "+15%", "Partielle")
    st.success("‚úÖ DEMANDE DE FINANCEMENT VALID√âE PAR L'IA: Le projet respecte les crit√®res de financement vert du FMI.")

def simuler_rapport_commune():
    st.subheader("üá∑üá™ Rapport de Commune : Financement Europ√©en (Saint-Paul)")
    st.info("Objectif : Obtenir un soutien de 460 000 ‚Ç¨ du programme FEDER.")
    st.subheader("Actions D√©j√† R√©alis√©es")
    st.markdown("- ‚úÖ √âtude des gisements de d√©chets bois flott√©s.")
    st.markdown("- ‚úÖ Mise en place d‚Äôun comit√© local Rekarbon.")
    st.markdown("- ‚úÖ Implantation d'un site test √† Savannah.")
    st.subheader("R√©sultats Attendus sur 2 Ans")
    col1, col2, col3 = st.columns(3)
    col1.metric("CO‚ÇÇ R√©duit", "300 tonnes/an", "localement")
    col2.metric("Emplois Cr√©√©s", "10", "directs")
    col3.metric("Tokens G√©n√©r√©s", "12 000 REKAR", "pour la communaut√©")
    st.success("‚úÖ PROJET √âLIGIBLE: L'IA confirme que le projet pilote correspond aux objectifs europ√©ens.")

def simuler_vente_bio_huile():
    st.subheader("üß¥ Simulation : Vente de Bio-Huile en Boutique")
    st.info("Vente d'un produit fini Rekarbon avec tra√ßabilit√© carbone.")
    st.markdown("---")
    col1, col2 = st.columns([3, 1])
    with col1:
        st.write("**Produit :** Bio-huile 'Source des Hauts' 5L")
        st.write("**Client :** Boutique 'Cosm√©tiques des Cimes' (Cilaos)")
    with col2:
        st.metric("Prix de Vente", "42 ‚Ç¨")
    with st.spinner("G√©n√©ration du token de tra√ßabilit√© carbone..."):
        time.sleep(2)
    st.success("‚úÖ TOKEN DE VALEUR CARBONE ASSOCI√â : 1,2 REKAR")
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/QR_code_for_mobile_English_Wikipedia.svg/1200px-QR_code_for_mobile_English_Wikipedia.svg.png", width=100, caption="QR Code de Tra√ßabilit√© (simul√©)")

def simuler_reforestation_ciblee():
    st.subheader("üå≤ Simulation : Reforestation Cibl√©e (Grand-Coude)")
    location_data = pd.DataFrame({'lat': [-21.2958], 'lon': [55.5694]})
    st.info("Objectif : Planter 1000 arbres end√©miques et tokeniser la s√©questration carbone.")
    st.map(location_data, zoom=11)
    col1, col2, col3 = st.columns(3)
    col1.metric("Surface", "4 ha")
    col2.metric("Essences Plant√©es", "2", "Tamarins, Bois de senteur")
    col3.metric("CO‚ÇÇ S√©questr√© (10 ans)", "75 tonnes")
    with st.spinner("G√©n√©ration des tokens de s√©questration..."):
        time.sleep(2)
    st.success("‚úÖ PROJET ENREGISTR√â : 75 tokens REKAR ont √©t√© pr√©-allou√©s.")

# ===================================================================
# PARTIE 2 : LE DICTIONNAIRE "RACCOURCIS"
# ===================================================================
simulations = {
    "Maintenance Pr√©dictive": simuler_maintenance_predictive_v2,
    "Optimisation Logistique": simuler_optimisation_logistique_v2,
    "Livraison (M√©t√©o)": simuler_livraison_temps_pluie_v2,
    "Vente & Tokenisation": simuler_vente_et_tokenisation_v2,
    "Cession de Tokens (B2B)": simuler_cession_token,
    "Rapport FMI (Maurice)": simuler_rapport_fmi,
    "Rapport Local (St-Paul)": simuler_rapport_commune,
    "Vente Produit (Bio-Huile)": simuler_vente_bio_huile,
    "Reforestation (Grand-Coude)": simuler_reforestation_ciblee,
}

# ===================================================================
# PARTIE 3 : L'INTERFACE UTILISATEUR
# ===================================================================
st.title("Tableau de Bord de Contr√¥le Global - Rekarbon")

st.sidebar.title("MENU SIMULATIONS")
choix = st.sidebar.selectbox(
    "Choisissez une simulation √† lancer :",
    list(simulations.keys())
)

if choix == "Maintenance Pr√©dictive":
    scenario_choisi = st.sidebar.radio(
        "Choisissez un √©tat pour le syst√®me :",
        ('Normal', 'Alerte'),
        key='maintenance_scenario'
    )
    if st.button(f"‚ñ∂Ô∏è Lancer la simulation : {choix} ({scenario_choisi})"):
        simuler_maintenance_predictive_v2(scenario=scenario_choisi)
else:
    if st.button(f"‚ñ∂Ô∏è Lancer la simulation : {choix}"):
        fonction_a_lancer = simulations[choix]
        fonction_a_lancer()