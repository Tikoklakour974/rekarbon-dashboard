import streamlit as st
import pandas as pd
import time
import secrets
import random

# ===================================================================
# PARTIE 1 : D√âFINITION DE TOUTES LES FONCTIONS DE SIMULATION "JURY"
# ===================================================================

# --- TH√âMATIQUES ORIGINALES AM√âLIOR√âES ---

def simuler_maintenance_predictive_v2(scenario='Normal'):
    st.subheader("‚öôÔ∏è Simulation : Maintenance Pr√©dictive")
    # ... (code de la fonction v2) ...
    st.success("Simulation termin√©e.")

def simuler_optimisation_logistique_v2():
    st.subheader("üöö Simulation : Optimisation Logistique")
    # ... (code de la fonction v2) ...
    st.success("Simulation termin√©e.")

def simuler_reforestation_et_carbone_v2():
    st.subheader("üå≥ Simulation : Reforestation & Cr√©dits Carbone")
    # ... (code de la fonction v2) ...
    st.success("Simulation termin√©e.")

def simuler_livraison_temps_pluie_v2():
    st.subheader("‚õàÔ∏è Simulation : Itin√©raire de Livraison M√©t√©o-d√©pendant")
    with st.spinner("ANALYSE (IA Rekarbon): Analyse des donn√©es m√©t√©o en temps r√©el et de l'√©tat des routes..."):
        time.sleep(2)
    st.info("M√âT√âO: Pluies fortes d√©tect√©es sur l'itin√©raire de livraison principal (Route du Littoral).")
    st.subheader("‚öñÔ∏è Matrice de D√©cision de l'IA")
    decision_data = {
        'Option': ['Plan A: Maintenir', 'Plan B: D√©tourner'],
        'Risque de retard important': ['√âlev√© (85%)', 'Faible (10%)'],
        'Co√ªt Carburant Estim√©': ['135 ‚Ç¨', '165 ‚Ç¨ (+22%)'],
        'Satisfaction Client Estim√©e': ['-40 pts', '+5 pts']
    }
    st.table(pd.DataFrame(decision_data))
    with st.spinner("D√âCISION (IA Rekarbon): S√©lection du plan B pour garantir la livraison..."):
        time.sleep(2)
    st.success("‚úÖ NOUVEL ITIN√âRAIRE D√âFINI: Le camion a √©t√© redirig√© via la Plaine des Palmistes. Retard estim√©: 25 minutes.")

def simuler_vente_et_tokenisation_v2():
    st.subheader("üî• Simulation : Vente de Biochar & Tokenisation")
    quantite_vendue = 25
    prix_tonne = 600
    valeur_transaction = quantite_vendue * prix_tonne
    tokens_generes = int(valeur_transaction / 10)
    st.info(f"TRANSACTION: Vente de **{quantite_vendue} tonnes** de biochar √† 'Client Industriel SAS'.")
    col1, col2 = st.columns(2)
    col1.metric("Montant de la Vente", f"‚Ç¨ {valeur_transaction:,.0f}")
    col2.metric("Tokens REKAR G√©n√©r√©s", f"{tokens_generes} REKAR", "R√©compense")
    with st.spinner("D√âCISION (IA Rekarbon): Enregistrement de la transaction et des tokens sur la blockchain..."):
        time.sleep(2)
    st.success(f"TOKENISATION R√âUSSIE: {tokens_generes} tokens 'REKAR' ont √©t√© g√©n√©r√©s et assign√©s au client.")
    st.code(f"ID de Transaction Blockchain: 0x{secrets.token_hex(30)}")
    st.subheader("üß† Indicateur IA : Potentiel March√© du Token")
    st.metric("Pr√©vision de valeur du token REKAR √† 6 mois", "13.80 ‚Ç¨", "+15%", help="Bas√© sur l'anticipation des march√©s carbone volontaires.")

# --- NOUVELLES TH√âMATIQUES ---

def simuler_cession_token():
    st.subheader("üîÅ Simulation : Cession de Tokens B2B")
    valeur_token = 12
    tokens_cedes = 500
    montant_total = valeur_token * tokens_cedes
    st.info("Contexte : **Client A** c√®de une partie de ses tokens REKAR √† **Client B** pour sa compensation carbone.")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("C√©dant : Client A")
        st.metric("Tokens C√©d√©s", f"- {tokens_cedes} REKAR")
    with col2:
        st.subheader("Acqu√©reur : Client B")
        st.metric("Tokens Re√ßus", f"+ {tokens_cedes} REKAR")
    st.metric("Montant Total de la Transaction", f"‚Ç¨ {montant_total:,.0f}", f"Bas√© sur 1 token = {valeur_token}‚Ç¨")
    with st.spinner("TRANSACTION: Enregistrement de la cession sur la blockchain..."):
        time.sleep(2)
    st.success("CESSION VALID√âE ET ENREGISTR√âE.")
    st.code(f"ID de Transaction Cession: 0x{secrets.token_hex(30)}")

def simuler_rapport_fmi():
    st.subheader("üåç Rapport Synth√©tique : Demande de Financement FMI (√éle Maurice)")
    st.info("Objectif : Obtenir un financement vert de 8,5M ‚Ç¨ pour le d√©ploiement national de Rekarbon.")
    with st.expander(" üå± Secteur Agricole & √ânergie"):
        [cite_start]st.markdown("- Valorisation des d√©chets agricoles (canne √† sucre) via pyrolyse. [cite: 33]")
        [cite_start]st.markdown("- Vente de biochar √† prix subventionn√© aux exploitants locaux pour am√©liorer les sols. [cite: 34]")
    with st.expander("üíª Secteur Num√©rique & Emploi"):
        [cite_start]st.markdown("- Cr√©ation d‚Äôun r√©seau autonome IA-native sur panneaux solaires pour les zones rurales. [cite: 35]")
        [cite_start]st.markdown("- Objectif : +1000 emplois verts et formation aux nouvelles technologies. [cite: 36]")
    st.subheader("üìà Objectifs Cl√©s pour 2030")
    col1, col2, col3 = st.columns(3)
    col1.metric("R√©duction √âmissions", "-25%", "vs 2020")
    col2.metric("Emplois Cr√©√©s", "+1000", "verts")
    col3.metric("Autosuffisance √ânerg√©tique", "+15%", "Partielle")
    st.success("‚úÖ DEMANDE DE FINANCEMENT VALID√âE PAR L'IA: Le projet respecte tous les crit√®res de financement vert du FMI.")

def simuler_rapport_commune():
    st.subheader("üá∑üá™ Rapport de Commune : Financement Europ√©en (Saint-Paul, La R√©union)")
    st.info("Objectif : Obtenir un soutien de 460 000 ‚Ç¨ du programme FEDER pour une implantation locale.")
    st.subheader("Actions D√©j√† R√©alis√©es")
    [cite_start]st.markdown("- ‚úÖ √âtude des gisements de d√©chets bois flott√©s post-cycloniques. [cite: 40]")
    [cite_start]st.markdown("- ‚úÖ Mise en place d‚Äôun comit√© local Rekarbon avec √©lus et agriculteurs. [cite: 40]")
    [cite_start]st.markdown("- ‚úÖ Implantation d'un site test dans la zone agricole de Savannah. [cite: 40]")
    st.subheader("R√©sultats Attendus sur 2 Ans")
    col1, col2, col3 = st.columns(3)
    col1.metric("CO‚ÇÇ R√©duit", "300 tonnes/an", "localement")
    col2.metric("Emplois Cr√©√©s", "10", "directs")
    col3.metric("Tokens G√©n√©r√©s", "12 000 REKAR", "pour la communaut√©")
    st.success("‚úÖ PROJET √âLIGIBLE: L'IA confirme que le projet pilote a un fort impact local et correspond aux objectifs europ√©ens.")

def simuler_vente_bio_huile():
    st.subheader("üß¥ Simulation : Vente de Bio-Huile en Boutique")
    st.info("Vente d'un produit fini Rekarbon avec tra√ßabilit√© carbone.")
    st.markdown("---")
    col1, col2 = st.columns([3, 1])
    with col1:
        st.write("**Produit :** Bio-huile 'Source des Hauts' 5L")
        st.write("**Client :** Boutique 'Cosm√©tiques des Cimes' (Cilaos)")
        st.write("**Usage :** Base pour des produits cosm√©tiques naturels")
    with col2:
        st.metric("Prix de Vente", "42 ‚Ç¨")
    with st.spinner("G√©n√©ration du token de tra√ßabilit√© carbone..."):
        time.sleep(2)
    st.success("‚úÖ TOKEN DE VALEUR CARBONE ASSOCI√â : 1,2 REKAR")
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/QR_code_for_mobile_English_Wikipedia.svg/1200px-QR_code_for_mobile_English_Wikipedia.svg.png", width=100, caption="QR Code de Tra√ßabilit√© (simul√©)")

def simuler_reforestation_ciblee():
    st.subheader("üå≤ Simulation : Reforestation Cibl√©e (Grand-Coude)")
    location_data = pd.DataFrame({'lat': [-21.1745], 'lon': [55.3410]})
    st.info("Objectif : Planter 1000 arbres end√©miques et tokeniser la s√©questration carbone.")
    st.map(location_data, zoom=10)
    col1, col2, col3 = st.columns(3)
    col1.metric("Surface", "4 ha")
    col2.metric("Essences Plant√©es", "2", "Tamarins, Bois de senteur")
    col3.metric("CO‚ÇÇ S√©questr√© (10 ans)", "75 tonnes")
    with st.spinner("G√©n√©ration des tokens de s√©questration..."):
        time.sleep(2)
    st.success("‚úÖ PROJET ENREGISTR√â : 75 tokens REKAR ont √©t√© pr√©-allou√©s. Leur lib√©ration sera conditionn√©e √† la croissance des arbres, suivie par l'IA.")


# ===================================================================
# PARTIE 2 : LE DICTIONNAIRE "RACCOURCIS"
# ===================================================================
simulations = {
    # Th√©matiques originales am√©lior√©es
    "Maintenance Pr√©dictive": simuler_maintenance_predictive_v2,
    "Optimisation Logistique": simuler_optimisation_logistique_v2,
    "Livraison (M√©t√©o)": simuler_livraison_temps_pluie_v2,
    "Vente & Tokenisation": simuler_vente_et_tokenisation_v2,
    
    # Nouvelles th√©matiques du document
    "Cession de Tokens (B2B)": simuler_cession_token,
    "Rapport FMI (Maurice)": simuler_rapport_fmi,
    "Rapport Local (St-Paul)": simuler_rapport_commune,
    "Vente Produit (Bio-Huile)": simuler_vente_bio_huile,
    "Reforestation (Grand-Coude)": simuler_reforestation_ciblee,
    
    # La v2 de reforestation est maintenant int√©gr√©e dans la nouvelle simulation plus sp√©cifique
    # On peut la retirer pour √©viter les doublons
}
# Nettoyage des doublons potentiels (si l'ancienne fonction est encore l√†)
# del simulations["Reforestation & Carbone"] # d√©commentez si besoin


# ===================================================================
# PARTIE 3 : L'INTERFACE UTILISATEUR
# ===================================================================
st.title("Tableau de Bord de Contr√¥le Global - Rekarbon")

st.sidebar.title("MENU SIMULATIONS")
choix = st.sidebar.selectbox(
    "Choisissez une simulation √† lancer :",
    list(simulations.keys())
)

if choix == "Maintenance Pr√©dictive":
    scenario_choisi = st.sidebar.radio(
        "Choisissez un √©tat pour le syst√®me :",
        ('Normal', 'Alerte'),
        key='maintenance_scenario'
    )
    if st.button(f"‚ñ∂Ô∏è Lancer la simulation : {choix} ({scenario_choisi})"):
        simuler_maintenance_predictive_v2(scenario=scenario_choisi)
else:
    if st.button(f"‚ñ∂Ô∏è Lancer la simulation : {choix}"):
        fonction_a_lancer = simulations[choix]
        fonction_a_lancer()